
% In this section you may modify the mesh in any way that does not
% alter the set of nodes.

    if (Steps(m)==0) && m.globalDynamicProps.doinit
        % Put any code here that should only be performed at the start of
        % the simulation.
        
        v_theta_p = atan2(m.FEnodes(:,3), m.FEnodes(:,1))/pi;   % theta
        R0 = 1; % radius of the initial semisphere
 
        theta = pi/4;   % parameter theta [0, pi/4, pi/2]
        L = 5*R0/8;       % parameter L [0, R0/4, R0/2, 3R0/4, R0]
        tol_L = 0.05;   
        
        if (theta == 0)  
            id_adaxial_p(m.FEnodes(:,1)>((R0-L)+tol_L)) = 1;   
            id_abaxial_p(m.FEnodes(:,1)<((R0-L)-tol_L)) = 1;
            
        elseif (theta == pi/2)
            id_adaxial_p(m.FEnodes(:,3)>((R0-L)+tol_L)) = 1;   
            id_abaxial_p(m.FEnodes(:,3)<((R0-L)-tol_L)) = 1;
            
        else
            id_adaxial_p(m.FEnodes(:,3)>(tan(pi-theta)*m.FEnodes(:,1))+...
                                    ((R0-L)/sin(theta)+tol_L))=1;
            id_abaxial_p(m.FEnodes(:,3)<(tan(pi-theta)*m.FEnodes(:,1))+...
                                    ((R0-L)/sin(theta)-tol_L))=1;
        end

        
        RADII_CORE = sqrt(m.FEnodes(:,1).^2 + m.FEnodes(:,2).^2);
        
        s_abaxial_p = id_abaxial_p;
        m.morphogenclamp((id_abaxial_p == 1), s_abaxial_i) = 1;
        m = leaf_mgen_conductivity( m, 'S_ABAXIAL', 0.05 );      % diffusion constant of S_ABAXIAL
        m = leaf_mgen_absorption( m, 'S_ABAXIAL', 0.01 );        % decay rate of S_ABAXIAL
        
        s_adaxial_p = id_adaxial_p;
        m.morphogenclamp((id_adaxial_p == 1), s_adaxial_i ) = 1;
        m = leaf_mgen_conductivity( m, 'S_ADAXIAL', 0.05 );      % diffusion constant of S_ADAXIAL
        m = leaf_mgen_absorption( m, 'S_ADAXIAL', 0.01 );        % decay rate of S_ADAXIAL
     
        RADII_CENTER = sqrt(m.FEnodes(:,1).^2 + m.FEnodes(:,2).^2 + m.FEnodes(:,3).^2);
        id_midplane_p((s_adaxial_p < 0.8) & (s_abaxial_p < 0.8)) = 1;
        id_surface_p((RADII_CENTER > 0.95) & (~id_midplane_p)) = 1;

        id_core_p((RADII_CORE<=0.05)&(~id_adaxial_p)) = 1;
    
        tip = [ 0, 0, 1 ];
        RADII_TIP = sqrt((m.FEnodes(:,1) - tip(1)).^2 +...
                         (m.FEnodes(:,2) - tip(2)).^2 +...
                         (m.FEnodes(:,3) - tip(3)).^2);
        id_base_p(m.FEnodes(:,3) == min(m.FEnodes(:,3))) = 1;    
        id_tip_p(RADII_TIP <= 0.025)=1;

        id_bottom_p(m.FEnodes(:,3) < 0.2) = 1;
              
        m = leaf_fix_vertex( m, 'vertex', find(m.FEnodes(:,3) == min(m.FEnodes(:,3))), 'dfs', 'z');
        
    end
    
    % @@ PRN Polarity Regulatory Network
    % Pre-growth stage for generating the polarity fields  
    % The orthoplanar polarity field was established by a diffusible morphogen POL
    % generated by a source and removed at a sink    
    % The proximodistal polarity field was established by a diffusible morphogen POL2
    % generated by a source and removed at a sink
    
    % @@ KRN Growth Rate Regulatory Network
    % kpar: growth rate paralle to the orthoplanar polarity field (Kop in the text)
    % kpar2: growth rate paralle to the proximodistal polarity field (Kpd in the text)
    % kper: growth rate perpendicular to both polarity fields (Kper in the text)
    
    if (realtime <= 3 - 0.0001)
        
        m = leaf_plotoptions( m, 'morphogen', { 'id_adaxial', 'id_abaxial', 'id_midplane' });
        m = leaf_plotpriority( m, { 'id_adaxial', 'id_abaxial', 'id_midplane' },...
                                  [ 1, 1, 2 ], [ 0.5, 0.5, 0.5 ], 'type', 'morphogen' );
        
        pol_p=0;
        pol2_p = -m.FEnodes(:,3);
        
        kpar_p = 0;
        kper_p = 0;
        kpar2_p = 0.8 * id_bottom_p;  % parameter H
    
    end
    
    if (realtime > 3 - 0.0001) && (realtime <= 4 - 0.0001)
                
        pol_p = id_surface_p - id_midplane_p - id_core_p;  
        m.morphogenclamp((id_surface_p == 1)|(id_midplane_p == 1)|(id_core_p == 1), pol_i) = 1;
        m = leaf_mgen_conductivity( m, 'POL', 0.1 ); 
        m = leaf_mgen_absorption( m, 'POL', 0.01 );    
        
        pol2_p = id_base_p - id_tip_p;  
        m.morphogenclamp((id_base_p == 1)|(id_tip_p == 1), pol2_i) = 1;
        m = leaf_mgen_conductivity( m, 'POL2', 0.1 );      
        m = leaf_mgen_absorption( m, 'POL2', 0.01 );   
        
        kpar_p = 0;
        kper_p = 0;
        kpar2_p = 0;

    end
    
    % Growth 
    if (realtime > 3 - 0.001) && (realtime <= 20 - 0.001)   % time 18

        kpar2_p = 0.25;
        kpar_p = 0.001;
        kper_p = 0.15;

    end