
% In this section you may modify the mesh in any way that does not
% alter the set of nodes.

    if (Steps(m)==0) && m.globalDynamicProps.doinit
        % Put any code here that should only be performed at the start of
        % the simulation.
        
        v_theta_p = atan2(m.FEnodes(:,3), m.FEnodes(:,1))/pi;   % theta
        R0 = 1; % radius of the initial semisphere

        theta = pi/2;   % [0, pi/4, pi/2]
        R = R0/4;    % [0, R0/4, R0/2, 3R0/4, R0]
        tol_R = 0.05;

        
        if (theta == 0)  
            id_adaxial_p(m.FEnodes(:,1)>((R0-R)+tol_R)) = 1;   
            id_abaxial_p(m.FEnodes(:,1)<((R0-R)-tol_R)) = 1;
            
        elseif (theta == pi/2)
            id_adaxial_p(m.FEnodes(:,3)>((R0-R)+tol_R)) = 1;   
            id_abaxial_p(m.FEnodes(:,3)<((R0-R)-tol_R)) = 1;
            
        else
            id_adaxial_p(m.FEnodes(:,3)>(tan(pi-theta)*m.FEnodes(:,1))+...
                                    ((R0-R)/sin(theta)+tol_R))=1;
            id_abaxial_p(m.FEnodes(:,3)<(tan(pi-theta)*m.FEnodes(:,1))+...
                                    ((R0-R)/sin(theta)-tol_R))=1;
        end

        
        RADII_CORE = sqrt(m.FEnodes(:,1).^2 + m.FEnodes(:,2).^2);

        s_abaxial_p = id_abaxial_p;
        m.morphogenclamp((id_abaxial_p == 1), s_abaxial_i) = 1;
        m = leaf_mgen_conductivity( m, 'S_ABAXIAL', 0.05 );      % diffusion constant of S_ABAXIAL
        m = leaf_mgen_absorption( m, 'S_ABAXIAL', 0.01 );        % decay rate of S_ABAXIAL
        
        s_adaxial_p = id_adaxial_p;
        m.morphogenclamp((id_adaxial_p == 1), s_adaxial_i ) = 1;
        m = leaf_mgen_conductivity( m, 'S_ADAXIAL', 0.05 );      % diffusion constant of S_ADAXIAL
        m = leaf_mgen_absorption( m, 'S_ADAXIAL', 0.01 );        % decay rate of S_ADAXIAL

        RADII_CENTER = sqrt(m.FEnodes(:,1).^2 + m.FEnodes(:,2).^2 + m.FEnodes(:,3).^2);
        id_midplane_p((s_adaxial_p < 0.8) & (s_abaxial_p < 0.8)) = 1;
        id_surface_p((RADII_CENTER > 0.95) & (~id_midplane_p)) = 1;

        id_core_p((RADII_CORE<=0.05)&(~id_adaxial_p)) = 1;
        id_bottom_p(m.FEnodes(:,3) < 0.2) = 1;

        id_stalk_p(m.FEnodes(:,3) < 0.2) = 1;  % factor STK
        id_blade_p(m.FEnodes(:,3) > 0.28) = 1; % factor BLA
        
        switch OPTIONS.modelname
            
            case 'MODEL10'  % DOUBLE CHECK!!!
                
                % factor MID_DOR
                id_mid_dor_p((abs(m.FEnodes(:,2))<0.2)&(m.FEnodes(:,1)<-0.3))=1;
                id_mid_dor_p = id_mid_dor_p & id_blade_p;
        
                s_mid_dor_p = id_mid_dor_p;
                m.morphogenclamp((id_mid_dor_p == 1), s_mid_dor_i) = 1;
                m = leaf_mgen_conductivity( m, 'S_MID_DOR', 0.02 );      
                m = leaf_mgen_absorption( m, 'S_MID_DOR', 0.001 ); 
                
                % factor MID_VEN
                id_mid_ven_p(((abs(m.FEnodes(:,2)+0.4)<0.05)|(abs(m.FEnodes(:,2)-0.4))<0.05)&...
                             (m.FEnodes(:,1)>0.3))=1;
                id_mid_ven_p = id_mid_ven_p & id_blade_p;
        
                s_mid_ven_p = id_mid_ven_p;
                m.morphogenclamp((id_mid_ven_p == 1), s_mid_ven_i) = 1;
                m = leaf_mgen_conductivity( m, 'S_MID_VEN', 0.01 );      
                m = leaf_mgen_absorption( m, 'S_MID_VEN', 0.001 );  
        
    
            case {'MODEL11', 'MODEL12', 'MODEL13'}
                
                % factor MID_DOR
                id_mid_dor_p(((abs(m.FEnodes(:,2)+0.4)<0.05)|(abs(m.FEnodes(:,2)-0.4))<0.05)&...
                             (m.FEnodes(:,1)>0.3))=1;
                id_mid_dor_p = id_mid_dor_p & id_blade_p;
        
                s_mid_dor_p = id_mid_dor_p;
                m.morphogenclamp((id_mid_dor_p == 1), s_mid_dor_i) = 1;
                m = leaf_mgen_conductivity( m, 'S_MID_DOR', 0.02 );      
                m = leaf_mgen_absorption( m, 'S_MID_DOR', 0.001 ); 
                
                % factor MID_VEN
                id_mid_ven_p((abs(m.FEnodes(:,2))<0.05)&(m.FEnodes(:,1)<-0.3))=1;
                id_mid_ven_p = id_mid_ven_p & id_blade_p;
        
                s_mid_ven_p = id_mid_ven_p;
                m.morphogenclamp((id_mid_ven_p == 1), s_mid_ven_i) = 1;
                m = leaf_mgen_conductivity( m, 'S_MID_VEN', 0.02 );      
                m = leaf_mgen_absorption( m, 'S_MID_VEN', 0.001 );  
                
                
            otherwise
                
                % factor MID
                id_mid_p((abs(m.FEnodes(:,2))<0.05)&(m.FEnodes(:,1)>0.3))=1;
                s_mid_p = id_mid_p & id_blade_p;
                m.morphogenclamp((id_mid_p == 1), s_mid_i) = 1;
                m = leaf_mgen_conductivity( m, 'S_MID', 0.02 );      
                m = leaf_mgen_absorption( m, 'S_MID', 0.001 ); 
        
        end
  
        tip = [ 0, 0, 1 ];
        RADII_TIP = sqrt((m.FEnodes(:,1) - tip(1)).^2 +...
                         (m.FEnodes(:,2) - tip(2)).^2 +...
                         (m.FEnodes(:,3) - tip(3)).^2);
        id_base_p(m.FEnodes(:,3) == min(m.FEnodes(:,3)))=1;    
        id_tip_p(RADII_TIP <= 0.025)=1;
 
        m = leaf_fix_vertex( m, 'vertex', find(m.FEnodes(:,3) == min(m.FEnodes(:,3))), 'dfs', 'z');
        
    end
    
    % @@ PRN Polarity Regulatory Network
    % Pre-growth stage for generating the polarity fields  
    % The orthoplanar polarity field was established by a diffusible morphogen POL
    % generated by a source and removed at a sink    
    % The proximodistal polarity field was established by a diffusible morphogen POL2
    % generated by a source and removed at a sink
    
    if (realtime <= 2 - 0.0001)
        
        m = leaf_plotoptions( m, 'morphogen', { 'id_adaxial', 'id_abaxial', 'id_midplane' });
        m = leaf_plotpriority( m, { 'id_adaxial', 'id_abaxial', 'id_midplane' },...
                                  [ 1, 1, 2 ], [ 0.5, 0.5, 0.5 ], 'type', 'morphogen' );
        
        pol_p=0;
        pol2_p = -m.FEnodes(:,3);
        
        kpar_p = 0;
        kper_p = 0;
        kpar2_p = 0.5 * id_bottom_p;   % for generating an elongated base part for primordium
        
    end
    
    % Pre-patterning
    if (realtime > 2 - 0.0001) && (realtime <= 3 - 0.0001)
                
        pol_p = id_surface_p - id_midplane_p - id_core_p;    % POL generated from the surface region and removed in the midplane region
        m.morphogenclamp((id_surface_p == 1)|(id_midplane_p == 1)|(id_core_p == 1), pol_i) = 1;
        m = leaf_mgen_conductivity( m, 'POL', 0.1 );     % diffusion constant of POL
        m = leaf_mgen_absorption( m, 'POL', 0.01 );      % decay rate of POL
        
        pol2_p = id_base_p - id_tip_p;   % POL2 generated from the proximal region and removed in the distal region
        m.morphogenclamp((id_base_p == 1)|(id_tip_p == 1), pol2_i) = 1;
        m = leaf_mgen_conductivity( m, 'POL2', 0.1 );         % diffusion constant of POL2
        m = leaf_mgen_absorption( m, 'POL2', 0.01 );          % decay rate of POL2
        
        kpar_p = 0;
        kper_p = 0;
        kpar2_p = 0;

    end
    
    % @@ KRN Growth Rate Regulatory Network
    % kpar: growth rate paralle to the orthoplanar polarity field (Kop in the text)
    % kpar2: growth rate paralle to the proximodistal polarity field (Kpd in the text)
    % kper: growth rate perpendicular to both polarity fields (Kper in the text)
    
    if (realtime > 3 - 0.001) && (realtime <= 20 - 0.001)
    
        switch OPTIONS.modelname
            
            case 'MODEL1'   % Cup-shaped model
                
                kpar_p = 0.001;
                kpar2_p = 0.25;
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL2'   % Dichocarpum fargesii petal 
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0,id_blade_p) .* pro(0.3,s_mid_p) .* pro(0.6,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL3'   % Asteropyrum cavaleriei petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0,id_blade_p) .* pro(0.4,s_mid_p) .* pro(0.4,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL4'   % Coptis japanica petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0,id_blade_p) .* pro(1.0,s_mid_p) .* pro(0.35,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL5'   % Trollius chinensis petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0,id_blade_p) .* pro(2.0,s_mid_p) .* pro(0,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL6'   % Isopyrum anemonoides petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0.65,id_blade_p) .* pro(0.2,s_mid_p) .* pro(0.01,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL7'   % Helleborus thibetanus petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(1,id_blade_p) .* pro(0.1,s_mid_p) .* pro(0,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL8'   % Isopyrum manshuricum petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0.3,id_blade_p) .* pro(0.35,s_mid_p) .* pro(0.01,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);

            case 'MODEL9'   % Oxygraphis glacialis petal
                
                kpar_p = 0.001;
                kpar2_p = 0.25 * pro(0,id_blade_p) .* pro(2,s_mid_p) .* pro(0.4,id_stalk_p);
                kper_p = 0.15 * inh(50,id_stalk_p);
                
            case 'MODEL10'   % Leptopyrum fumarioides petal
                
                kpar2_p = 0.25 * pro(0,id_blade_p).*pro(0.4,s_mid_dor_p).*pro(0.5,s_mid_ven_p).*pro(0.2,id_stalk_p);
                kpar_p = 0.001;
                kper_p = 0.15 * inh(5,id_stalk_p);

            case 'MODEL11'   % Eranthis stellata petal
                
                kpar2_p = 0.25 * pro(0.65,id_blade_p).*pro(0.4,s_mid_dor_p).*pro(0.25,s_mid_ven_p).*pro(0.4,id_stalk_p);
                kpar_p = 0.001;
                kper_p = 0.15 * inh(5,id_stalk_p);
                
            case 'MODEL12'   % Nigella integrifolia petal
                
                kpar2_p = 0.25 * pro(0,id_blade_p).*pro(2.0,s_mid_dor_p).*pro(0.5,s_mid_ven_p).*inh(0.5,id_stalk_p);
                kpar_p = 0.001;
                kper_p = 0.15 * inh(5,id_stalk_p);            
            
            case 'MODEL13'   % Nigella nigellastrum petal
             
                kpar2_p = 0.25 * pro(0,id_blade_p).*pro(1.5,s_mid_dor_p).*pro(0.8,s_mid_ven_p).*pro(0.4,id_stalk_p);
                kpar_p = 0.001;
                kper_p = 0.15 * inh(5,id_stalk_p).*pro(0.3,s_mid_dor_p);

        end
        
    end
%     
%     